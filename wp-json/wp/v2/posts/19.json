{"id":19,"date":"2023-01-29T07:22:04","date_gmt":"2023-01-29T07:22:04","guid":{"rendered":"http:\/\/192.168.31.11:9000\/?p=19"},"modified":"2023-02-23T06:13:51","modified_gmt":"2023-02-23T06:13:51","slug":"implementing-method-chaining-with-a-page-object-model","status":"publish","type":"post","link":"http:\/\/www.testnx.tech:90\/articles\/implementing-method-chaining-with-a-page-object-model","title":{"rendered":"Implementing Method Chaining with a Page Object Model"},"content":{"rendered":"\r\n<h2>Page Object Model Design Pattern<\/h2>\r\n<p>When creating a test automation framework using the Page Object Model design pattern and Selenium, a useful feature to add is Method Chaining (also known as Fluid Syntax) to make your test steps more readable and therefore maintainable. So instead of your test code using a LoginPage object like this:<\/p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>LoginPage loginPage = new LoginPage(driver);\r\nloginPage.setUsername(\"JohnDoe\");\r\nloginPage.setPassword(\"he7s6eh!dy\");\r\nloginPage.clickLoginButton();<\/code><\/pre>\r\n\r\n\r\n\r\n<p>Using fluid syntax we can chain the method calls so that the code would look something like this:<\/p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>LoginPage loginPage = new LoginPage(driver);\r\nloginPage.setUsername(\"JohnDoe\")\r\n         .setPassword(\"he7s6eh!dy\")\r\n         .clickLoginButton();<\/code><\/pre>\r\n\r\n\r\n\r\n<p>As you can see, the little code snippet is a\u00a0<em>little<\/em>\u00a0more readable, however the cumulative effect of using this technique throughout our tests improves readability hugely, especially when we also chain method calls across multiple web pages \/ page objects and use \u2018business methods\u2019 \u2013 which we\u2019ll cover further down this article. For now let\u2019s explore how to implement method chaining \/ fluid syntax in a single page, the Login page, and then use it in our Selenium tests.<\/p>\r\n\r\n\r\n\r\n<p>Originally a simplified LoginPage object\u00a0<em>without<\/em>\u00a0fluid syntax might be implemented using code like this:<\/p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>public class LoginPage {\r\n\r\n    public WebDriver driver;\r\n\r\n    public LoginPage(WebDriver driver) {\r\n        this.driver = driver;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        driver.findElement(By.id(\"username\")).sendKeys(username);\r\n    }\r\n\r\n    public void setPassword(String password)\r\n    {\r\n        driver.findElement(By.id(\"pwd\")).sendKeys(password);\r\n    }\r\n\r\n    private void clickLoginButton() {\r\n        driver.findElement(By.id(\"loginBtn\")).click();\r\n    }\r\n}<\/code><\/pre>\r\n\r\n\r\n\r\n<p>To use fluid syntax we need to amend the setUsername() and setPassword() methods to return the current instance of the LoginPage object, i.e.\u00a0<strong>return this;<\/strong>\u00a0We therefore also need to change the method declaration so that instead of \u2018private void methodName\u2019 we have \u2018private LoginPage methodName\u2019:<\/p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>public class LoginPage {\r\n\r\n    public WebDriver driver;\r\n\r\n    public LoginPage(WebDriver driver) {\r\n        this.driver = driver;\r\n    }\r\n\r\n    public <strong>LoginPage<\/strong> setUsername(String username) {\r\n        driver.findElement(By.id(\"username\")).sendKeys(username);\r\n        <strong>return this;<\/strong>\r\n    }\r\n\r\n    public <strong>LoginPage<\/strong> setPassword(String password)\r\n {\r\n        driver.findElement(By.id(\"pwd\")).sendKeys(password);\r\n        <strong>return this;\r\n<\/strong>\r\n    }\r\n\r\n    private void clickLoginButton() {\r\n        driver.findElement(By.id(\"loginBtn\")).click();\r\n    }\r\n}<\/code><\/pre>\r\n","protected":false},"excerpt":{"rendered":"<p>Page Object Model Design Pattern When creating a test automation framework using the Page Object Model design pattern and Selenium, a useful feature to add is Method Chaining (also known as Fluid Syntax) to make your test steps more readable and therefore maintainable. So instead of your test code using a LoginPage object like this: [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_themeisle_gutenberg_block_has_review":false},"categories":[15],"tags":[],"_links":{"self":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/19"}],"collection":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/comments?post=19"}],"version-history":[{"count":2,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/19\/revisions"}],"predecessor-version":[{"id":26,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/19\/revisions\/26"}],"wp:attachment":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/media?parent=19"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/categories?post=19"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/tags?post=19"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}