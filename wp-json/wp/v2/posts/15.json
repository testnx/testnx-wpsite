{"id":15,"date":"2023-01-29T07:19:11","date_gmt":"2023-01-29T07:19:11","guid":{"rendered":"http:\/\/192.168.31.11:9000\/?p=15"},"modified":"2023-01-29T07:19:11","modified_gmt":"2023-01-29T07:19:11","slug":"hate-cucumber-bdd-for-api-tests","status":"publish","type":"post","link":"http:\/\/www.testnx.tech:90\/articles\/hate-cucumber-bdd-for-api-tests","title":{"rendered":"Hate Cucumber &amp; BDD for API tests?"},"content":{"rendered":"\n<p>It\u2019s crucial to know when to use Cucumber and BDD to test APIs, and when NOT to.<\/p>\n\n\n\n<p>It\u2019s a controversial topic and many have strong views on this, so in this article we\u2019re going to take a good look \u2013 using real world examples \u2013&nbsp;of when to use BDD, Cucumber, feature files and Gherkin to define our automated API tests, and when to simply use traditional test case code.<\/p>\n\n\n\n<p>For those of you unfamiliar with this approach, Cucumber uses Gherkin in a Given \u2013 When \u2013 Then syntax to define our tests using natural language, for example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scenario: Check if user details can be successfully retrieved\n  <strong>Given<\/strong> a userid \"joebloggs47\"\n  <strong>When<\/strong> the users information is retrieved\n  <strong>Then<\/strong> the response code is \"OK\"\n  And the response user forename is \"Joe\"\n  And the response user surname is \"bloggs\"<\/code><\/pre>\n\n\n\n<p>Each of these steps has a corresponding code method which is executed when the test is run. Typically the&nbsp;<strong>Given<\/strong>&nbsp;steps have code that set up prerequisites and test data, the&nbsp;<strong>When<\/strong>&nbsp;calls the API, and the&nbsp;<strong>Then<\/strong>&nbsp;statements verify that the correct data has been returned.<\/p>\n\n\n\n<p><strong>The main advantage of Cucumber<\/strong>&nbsp;is that the Gherkin steps can be easily understood by non-technical stakeholders such as Business Analysts, Product Owners and Test Managers so they can quickly grasp the coverage of the automated tests.<\/p>\n\n\n\n<p><strong>The disadvantage of Cucumber<\/strong>&nbsp;is that it adds extra layers of complexity and maintenance to your test automation framework, making them more difficult and time consuming to create and maintain.<\/p>\n\n\n\n<p><strong><em>So are the benefits of Cucumber worth the extra burden? Well, that depends!<\/em><\/strong><\/p>\n\n\n\n<p>In my opinion the use of Cucumber and Gherkin for testing APIs is worthwhile when they express the core business rules of an organisation, but not the basic CRUD (create, read, update, delete) functionality an application needs to function.<\/p>\n\n\n\n<p>For example the scenario above checks that a user\u2019s details can be retrieved from the users API, and in the same feature file you might expect to also see scenarios to check that the API correctly creates, updates and deletes a user. But does the Product Owner really need to see this expressed in Gherkin so that they know the application can read and write data to the database? Surely that is such a basic function of the system that it\u2019s not really necessary to have this written in Gherkin.<\/p>\n\n\n\n<p>Plus, as more and more software development take a microservices approach to systems architecture the number of such basic APIs expands greatly, and I believe using Cucumber to test them becomes a large and unnecessary burden which provides little value to the business or technical teams.<\/p>\n\n\n\n<p>However there are also situations where I would recommend using Cucumber to test APIs. As I mentioned above, this are where they define and test the business rules or logic of an organisation. Let\u2019s look at an example from real life \u2013 a project I have actually worked on.<\/p>\n\n\n\n<p>The application is a Mortgage Origination website, where a user applies for a mortgage online by entering (via a bank employee) details of the property they wish to purchase, how much they want to borrow, their personal details including salary \/ income, and so on.<\/p>\n\n\n\n<p>At the end of the process they submit their mortgage application and will get back either an \u2018Accept\u2019, a \u2018Decline\u2019 or a \u2018Refer\u2019 (a \u2018maybe\u2019, with further discussion needed). The decision-making process is driven by a Decision Engine API which takes the information about each application and makes a decision on whether a loan should be approved.<\/p>\n\n\n\n<p>This algorithm is obviously a core business process, and creating an automated test suite to rigorously and repeatedly check that the API is providing the expected results would be high on my list of priorities. Expressing these tests and rules as Gherkin makes perfect sense too because the Business Analysts, Product Owners, Underwriters and other stakeholders in the organisation need to be able to read them to make sure they understand how the Decision Engine is being tested, what is the coverage, and add or modify rules as required.<\/p>\n\n\n\n<p>Let\u2019s take a look at a couple of examples:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scenario: Decline if applicant age at end of loan term is greater than 70 years old\n  Given a standard residential mortgage application\n  But the mortgage term is \"20\" years\n  And the applicant age is \"51\" years old\n  When the mortgage application is submitted\n  Then the response status is \"OK\"\n  And the decision is \"Decline\"\n  And the decision reasons include code \"D435\" \"Applicant exceeds maximum age at end of term\"\n\nScenario: Decline if buy-to-let loan amount exceeds maximum threshold of 90% of property value\n  Given a standard buy-to-let mortgage application\n  but the property value is \"100,000\" dollars\n  And the loan amount is \"90,001\" dollars\n  When the mortgage application is submitted\n  Then the response status is \"OK\"\n  And the decision is \"Decline\"\n  And the decision reasons include code \"A203\" \"BTL loan-to-value exceeds 90%\"<\/code><\/pre>\n\n\n\n<p>I hope you can see the value to the business of having tests that are understandable to non-technical stakeholders, and also that simple CRUD tests don\u2019t need to be expressed using Cucumber and Gherkin because that provides little value to the business and technical teams. If you disagree (or agree!), please leave a comment below.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>It\u2019s crucial to know when to use Cucumber and BDD to test APIs, and when NOT to. It\u2019s a controversial topic and many have strong views on this, so in this article we\u2019re going to take a good look \u2013 using real world examples \u2013&nbsp;of when to use BDD, Cucumber, feature files and Gherkin to [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_themeisle_gutenberg_block_has_review":false},"categories":[3],"tags":[],"_links":{"self":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/15"}],"collection":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/comments?post=15"}],"version-history":[{"count":1,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/15\/revisions"}],"predecessor-version":[{"id":16,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/15\/revisions\/16"}],"wp:attachment":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/media?parent=15"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/categories?post=15"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/tags?post=15"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}