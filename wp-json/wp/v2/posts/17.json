{"id":17,"date":"2023-01-29T07:20:06","date_gmt":"2023-01-29T07:20:06","guid":{"rendered":"http:\/\/192.168.31.11:9000\/?p=17"},"modified":"2023-02-04T10:16:56","modified_gmt":"2023-02-04T10:16:56","slug":"sharing-data-between-specflow-classes-using-context-injection","status":"publish","type":"post","link":"http:\/\/www.testnx.tech:90\/articles\/sharing-data-between-specflow-classes-using-context-injection","title":{"rendered":"Sharing data between SpecFlow classes using Context Injection"},"content":{"rendered":"\n<p>Sharing data between step definition methods within the same class is pretty straightforward in SpecFlow \u2013 you can simply create and use a class variable \u2013 but how do we share data between steps in different classes? In the past this was done using Scenario Context and Feature Context, however these are now outdated (and don\u2019t work when running scenarios in parallel) so from SpecFlow 3.0 we need to instead use Context Injection.<\/p>\n\n\n\n<p>But first let\u2019s take a step back and revisit sharing data within a single class using class instance variables, before extending that code to share data between separate classes using Context Injection.<\/p>\n\n\n\n<h2>Sharing data within a single Class<\/h2>\n\n\n\n<p>In the simple example API test below we are calling an \u2018books\u2019 endpoint with a book id to retrieve a book\u2019s details from the back end, and we then check the response status is OK and the book id retrieved matches the id we used to request the user data.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scenario: Check we can retrieve book data\n    Given a book id '1'\n    When the book details are retrieved\n    Then the response status is 'OK'\n    And the book id retrieved matches the requested book id<\/code><\/pre>\n\n\n\n<p>In the step definition code below for the \u2018Given\u2019 step, we store the book id value in the class variable \u2018bookId\u2019 so that it can be used later by other steps in the same class, for example in the \u2018When\u2019 step we use it to construct an endpoint URL to retrieve the book data from the API: https:\/\/localhost:3000\/books\/1<\/p>\n\n\n\n<p>Also in the \u2018When\u2019 step we store the entire response data retrieved into a class instance variable \u2018response\u2019 so that it an be used by both the \u2018Then\u2019 steps to verify the book data is correct.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;Binding]\npublic class BookSteps\n{\n    private string bookId;\n    private IRestResponse&lt;Book&gt; response;\n\n    &#91;Given(@\"a book id '(.*)'\")]\n    public void GivenBookWithId(string bkid)\n    {\n<strong>        this.bookId = bkid;<\/strong>\n    }\n\n    &#91;When(@\"the book details are retrieved\")]\n    public void WhenBookDetailsRetrieved()\n    {\n        var client = new RestClient(\"http:\/\/localhost:3000\/\");\n        var request = new RestRequest(\"books\/\" + <strong>this.bookId<\/strong>, Method.GET);\n        <strong>this.response<\/strong> = client.Execute&lt;Book&gt;(request);\n    }\n\n    &#91;Then(@\"the response status is '(.*)'\")]\n    public void ThenResponseStatusIsCorrect(string expectedStatusCode)\n    {\n        if (expectedStatusCode == \"OK\")\n        {\n            Assert.AreEqual(<strong>this.response.StatusCode<\/strong>, HttpStatusCode.OK);\n        }\n        \/\/ ... etc\n    }\n\n    &#91;Then(@\"the book id retrieved matches the requested book id\")]\n    public void ThenbookIdRetrievedMatchesRequestId()\n    {\n        Assert.AreEqual(<strong>this.response.Data.Id<\/strong>, this.bookId);\n    }\n\n}<\/code><\/pre>\n\n\n\n<p>So that is how we can share data within the steps in a class, by using class member variables. Let\u2019s now take a look at why we might need to share data between different classes, and how we use Context Injection to make that possible.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Sharing data between step definition methods within the same class is pretty straightforward in SpecFlow \u2013 you can simply create and use a class variable \u2013 but how do we share data between steps in different classes? In the past this was done using Scenario Context and Feature Context, however these are now outdated (and [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_themeisle_gutenberg_block_has_review":false},"categories":[14],"tags":[],"_links":{"self":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/17"}],"collection":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/comments?post=17"}],"version-history":[{"count":1,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/17\/revisions"}],"predecessor-version":[{"id":18,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/posts\/17\/revisions\/18"}],"wp:attachment":[{"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/media?parent=17"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/categories?post=17"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/www.testnx.tech:90\/wp-json\/wp\/v2\/tags?post=17"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}